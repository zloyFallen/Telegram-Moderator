from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.models import User, ChatSettings, AntiBotSettings, LogChannel, AutoDeleteSettings
import random
import asyncio

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start(message: types.Message):
    user = User.get(message.from_user.id)
    if not user:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="set_language_en")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=keyboard)
    else:
        if user.language == 'ru':
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        else:
            await message.answer("Hello! How can I help you?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def set_language(callback: types.CallbackQuery):
    language = callback.data.split("_")[-1]
    User.set_language(callback.from_user.id, language)

    if language == 'ru':
        await callback.message.edit_text("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π")
    else:
        await callback.message.edit_text("‚úÖ Language set: English")

    await callback.answer()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def welcome_new_user(message: types.Message):
    chat_id = message.chat.id
    settings = ChatSettings.get(chat_id)
    if not settings or not settings.welcome_enabled:
        return

    new_user = message.new_chat_members[0]
    user = User.get(new_user.id)
    language = user.language if user else 'ru'

    if language == 'ru':
        welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_user.first_name}!"
    else:
        welcome_text = f"Welcome, {new_user.first_name}!"

    if settings.welcome_media:
        if settings.welcome_media.startswith("Ag"):
            sent_message = await message.answer_animation(settings.welcome_media, caption=welcome_text)
        else:
            sent_message = await message.answer_photo(settings.welcome_media, caption=welcome_text)
    else:
        sent_message = await message.answer(welcome_text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await delete_message_after_delay(sent_message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def check_new_member(message: types.Message):
    chat_id = message.chat.id
    settings = AntiBotSettings.get(chat_id)
    if not settings or not settings.enabled:
        return

    captcha = generate_captcha(settings.captcha_type)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–Ø –Ω–µ –±–æ—Ç", callback_data=f"captcha_{captcha}"))
    sent_message = await message.answer(f"–î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {captcha}", reply_markup=keyboard)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await delete_message_after_delay(sent_message)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—á—É
    await asyncio.sleep(settings.kick_time)
    try:
        await message.chat.kick(user_id=message.from_user.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
async def handle_captcha(callback: types.CallbackQuery):
    await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await callback.message.delete()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
def generate_captcha(captcha_type='digits'):
    if captcha_type == 'digits':
        return ''.join(random.choices('0123456789', k=4))
    elif captcha_type == 'letters':
        return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=4))
    else:
        return ''.join(random.choices('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=4))

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
async def delete_message_after_delay(message: types.Message):
    chat_id = message.chat.id
    settings = AutoDeleteSettings.get(chat_id)
    if not settings or not settings.enabled:
        return

    await asyncio.sleep(settings.delete_time)
    try:
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers_user(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"])
    dp.register_callback_query_handler(set_language, lambda c: c.data.startswith("set_language_"))
    dp.register_message_handler(welcome_new_user, content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
    dp.register_message_handler(check_new_member, content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
    dp.register_callback_query_handler(handle_captcha, lambda c: c.data.startswith("captcha_"))